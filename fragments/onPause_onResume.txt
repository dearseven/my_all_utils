setUserVisibleHint的使用场景:FragmentPagerAdapter+ViewPager
这种方式我们还是比较常见的,譬如,谷歌自带的TabLayout控件,此种场景下,当我们切换fragment的时候,会调用setUserVisibleHint方法,不会调用onHiddenChanged方法,也不会走fragment的生命周期方法(fragment初始化完成之后,注意这里需要重写viewpager中使用的适配器的方法,让fragment不会被销毁,不然还是会遇到问题).具体方法提如下

@Override

public void setUserVisibleHint(boolean isVisibleToUser) {

         super.setUserVisibleHint(isVisibleToUser);

        if (isVisibleToUser) {

              // 相当于onResume()方法--获取焦点

       } else {

           // 相当于onpause()方法---失去焦点

        }

}



onHiddenChanged的使用场景: 一般我们打开应用时底部会有四五个tab键,使用add()+show()来显示和隐藏Fragment，hide()跳转新的Fragment时，旧的Fragment回调onHiddenChanged(),不会回调onStop()等生命周期方法，而新的Fragment在创建时是不会回调onHiddenChanged()，所以一般会和onresume（）方法配合使用。具体场景自己来判断。
@Override

public void onHiddenChanged(boolean hidden) {

               if (hidden) {

                 //相当于Fragment的onPause()

               } else {

                  // 相当于Fragment的onResume()

            }

    }

注意此方法在使用的时候,最好是等到fragment初始化完成以后,否则容易出错.